name: Deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Which release version to deploy (e.g. v1.0.3)
        required: true
      environment:
        description: Which environment to deploy to (dev, test or prod)
        required: true

  workflow_run:
    workflows: [Build and publish]
    types: [completed]

env:
  GITHUB_TOKEN: ${{ github.token }}
  ENVIRONMENT: ${{ inputs.environment || 'dev' }}
  RELEASE: ${{ inputs.ref || 'latest' }}

jobs:
  find_tag:
    name: Find latest tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find latest tag
        if: env.RELEASE == 'latest'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "TAG=$(gh release view --json name | jq -r '.name')" >> $GITHUB_ENV

      - name: Set release tag if not latest
        if: env.RELEASE != 'latest'
        run: echo "TAG=${{ inputs.release }}" >> $GITHUB_ENV

      - name: Output tag
        id: set-tag
        run: echo "TAG=${{ env.TAG }}" >> $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

  deploy:
    name: Deploy to ${{ inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    needs: find_tag
    env:
      TAG: ${{ needs.find_tag.outputs.tag }}
    steps:
      - name: Validate environment
        if: env.ENVIRONMENT != 'dev' && env.ENVIRONMENT != 'test' && env.ENVIRONMENT != 'prod'
        run: echo "::error::Invalid environment $ENVIRONMENT" && exit 1

      - name: Validate release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ env.TAG }}

      - name: Create deployment
        id: create_deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ env.ENVIRONMENT }}
          production-environment: ${{ env.ENVIRONMENT == 'prod' }}
          description: Deployment of release ${{ env.TAG }} to ${{ env.ENVIRONMENT }}
          ref: ${{ env.TAG }}
          payload: '{"workflow_run_id": ${{ github.run_id }}}'

      - name: Set deployment in progress
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: in_progress
          deployment-id: ${{ steps.create_deployment.outputs.deployment_id }}

      - name: Download release artifact
        run: curl https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/release.zip --output release.zip -L

      - name: Unzip release artifact
        run: unzip release.zip -d release

      - name: Download azcopy
        run: curl https://aka.ms/downloadazcopy-v10-linux --output azcopy_v10.tar.gz -L && tar -xf azcopy_v10.tar.gz --strip-components=1 && chmod +x azcopy

      - name: Login with Azure Service Principal
        env:
          AZCOPY_SPA_CLIENT_SECRET: ${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}
        run: ./azcopy login --service-principal --application-id 39bec033-4358-4ae1-abbd-ecb8de5729cf --tenant-id a7d6d49d-a422-491d-bc2f-e60e48013583

      - name: Set storage account
        run: |
          echo "STORAGE_ACCOUNT=${{ env.ENVIRONMENT == 'prod' && 'githubdeploy' || env.ENVIRONMENT == 'test' && 'githubdeploytest' || 'githubdeploydev' }}" >> $GITHUB_ENV

      - name: Copy files to Azure Storage
        run: cd release && ../azcopy sync . "https://${STORAGE_ACCOUNT}.blob.core.windows.net/\$web" --delete-destination true

      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        if: always()
        with:
          token: ${{ github.token }}
          deployment-id: ${{ steps.create_deployment.outputs.deployment_id }}
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
